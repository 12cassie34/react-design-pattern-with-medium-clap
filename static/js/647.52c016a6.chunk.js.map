{"version":3,"file":"static/js/647.52c016a6.chunk.js","mappings":"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","sources":["components/PropsGetter/useClapAnimation.ts","components/PropsGetter/useClapsCount.ts","components/PropsGetter/index.tsx","pages/StateInitialiser.tsx"],"sourcesContent":["import { useSpring } from '@react-spring/web';\r\nimport { useState } from 'react';\r\n\r\nconst useClapAnimation = () => {\r\n    const [isHover, setIsHover] = useState(false);\r\n\r\n    const boxShadowAnimation = useSpring({\r\n        from: { opacity: isHover ? 0 : 1, transition: 'ease' },\r\n        to: [{ opacity: isHover ? 1 : 0 }],\r\n        loop: isHover,\r\n        config: { duration: 1_000 },\r\n    });\r\n    const [clapAddedAnimation, clapAddedApi] = useSpring(() => ({\r\n    }));\r\n    const [streamersAnimation, streamersApi] = useSpring(() => ({}));\r\n\r\n    return { boxShadowAnimation, clapAddedAnimation, clapAddedApi, streamersAnimation, streamersApi, setIsHover }\r\n}\r\n\r\nexport default useClapAnimation;","import { useState } from 'react';\r\n\r\nconst useClapsCount = () => {\r\n    const [addedClap, setAddedClap] = useState(0);\r\n    const [totalClap, setTotalClap] = useState(200);\r\n\r\n    return { addedClap, setAddedClap, totalClap, setTotalClap }\r\n}\r\n\r\nexport default useClapsCount;","import { FunctionComponent, PropsWithChildren } from 'react';\r\nimport { animated } from '@react-spring/web';\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport useClapAnimation from './useClapAnimation';\r\nimport useClapsCount from './useClapsCount';\r\n\r\nimport DisplayLayout from '../DisplayLayout';\r\nimport Streamers from '../Streamers';\r\n\r\ninterface ClapContainerProps {\r\n    handleClick: () => void;\r\n}\r\n\r\nconst ClapContainer: FunctionComponent<PropsWithChildren<ClapContainerProps>> = ({ children, handleClick, ...props }) => (\r\n    <IconButton\r\n                        onClick={handleClick}\r\n                        aria-label=\"thumb up\"\r\n                        color=\"primary\"\r\n                        sx={{ border: '1px solid', width: '60px', height: '60px', backgroundColor: '#ffffff' }}\r\n                        {...props}>\r\n        {children}\r\n    </IconButton>\r\n    )\r\n\r\nconst PropsGetter: FunctionComponent = () => {\r\n    const { clapAddedAnimation, boxShadowAnimation, streamersAnimation, setIsHover, clapAddedApi, streamersApi } = useClapAnimation();\r\n    const { addedClap, totalClap, setAddedClap, setTotalClap } = useClapsCount();\r\n\r\n    const handleAddedClap = () => {\r\n        if (addedClap < 50) {\r\n            clapAddedApi.start({\r\n                from: { opacity: 2, transform: 'translate(0px, 10px)', transition: 'ease-in-out', transitionDelay: '2500' },\r\n                to: { opacity: 0, transform: 'translate(0px, -100px)' },\r\n                config: { duration: 700 },\r\n            });\r\n            streamersApi.start({\r\n                from: { opacity: 10, transform: 'scale(0)' },\r\n                to: { opacity: 0, transform: 'scale(1)' }\r\n            });\r\n            setAddedClap(addedClap + 1);\r\n            setTotalClap(totalClap + 1);\r\n        }\r\n    };\r\n\r\n    const getClapContainerProps = () => \r\n        // Here, your can do some complicated operation before passing \r\n        // props in <ClapContainer />\r\n         ({\r\n            'aria-valuenow': totalClap,\r\n        'aria-valuemax': 50\r\n        })\r\n    \r\n\r\n    return (\r\n        <DisplayLayout chipLabel='Props Getter ðŸ›¬'>\r\n            <animated.div\r\n                    style={{\r\n                        position: 'relative',\r\n                        opacity: 0,\r\n                        ...clapAddedAnimation\r\n                    }}\r\n                >\r\n                <IconButton sx={{\r\n                        padding: '20px',\r\n                        backgroundColor: '#90caf9',\r\n                        width: '20px',\r\n                        height: '20px',\r\n                    }}>\r\n                    <Typography variant=\"body2\">{`+${addedClap}`}</Typography>\r\n                </IconButton>\r\n            </animated.div>\r\n            <Typography variant=\"body2\" color=\"primary\" sx={{ position: 'absolute', top: '6px' }}>{totalClap}</Typography>\r\n            <Stack \r\n                    onMouseEnter={() => setIsHover(true)}\r\n                    onMouseLeave={() => setIsHover(false)}\r\n                    sx={{\r\n                        position: 'absolute'\r\n                    }}\r\n                >\r\n                <animated.div\r\n                        style={{\r\n                            borderRadius: '50%',\r\n                            width: '60px',\r\n                            height: ' 60px',\r\n                            position: 'absolute',\r\n                            boxShadow: '0px 0px 28px #90caf9',\r\n                            ...boxShadowAnimation,\r\n                        }}\r\n                    />\r\n                <animated.div\r\n                        style={{\r\n                            opacity: 0,\r\n                            ...streamersAnimation\r\n                        }}\r\n                    >\r\n                    <Streamers />\r\n                </animated.div>\r\n                <ClapContainer handleClick={handleAddedClap} {...getClapContainerProps()} >\r\n                    <Typography variant='body1'>Thumb UP</Typography>\r\n                </ClapContainer>\r\n            </Stack>\r\n        </DisplayLayout>);\r\n}\r\n\r\nexport default PropsGetter;","import { FunctionComponent } from \"react\";\r\n\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport ComparisonSection from \"../components/ComparisonSection\";\r\nimport PropsGetter from \"../components/PropsGetter\";\r\nimport StateInitialiser from \"../components/StateInitialiser\";\r\n\r\nconst StateInitialiserPage: FunctionComponent = () => (\r\n    <Stack spacing={2}>\r\n        <Typography variant='h4'>State Initialiser</Typography>\r\n        <Typography variant='body1'>\r\n            For states, we basically have 3 types of mode: initial states, updating states and resetting states.\r\n        </Typography>\r\n        <Typography variant='body1'>\r\n            In the state initialiser pattern, we let the user set initial states of their components, \r\n            and also make it possible for them at any point in time to reset the state of the components \r\n            to the initial state.\r\n        </Typography>\r\n        <ComparisonSection\r\n            beforeComponent={<PropsGetter />}\r\n            beforeSourceCode=\"https://github.com/12cassie34/react-design-pattern-with-medium-clap/tree/main/src/components/PropsGetter\"\r\n            afterComponent={<StateInitialiser />}\r\n            afterSourceCode=\"https://github.com/12cassie34/react-design-pattern-with-medium-clap/tree/main/src/components/StateInitialiser\"\r\n        />\r\n    </Stack>\r\n)\r\n\r\nexport default StateInitialiserPage;"],"names":["_useState","useState","_useState2","_slicedToArray","isHover","setIsHover","boxShadowAnimation","useSpring","from","opacity","transition","to","loop","config","duration","_useSpring","_useSpring2","clapAddedAnimation","clapAddedApi","_useSpring3","_useSpring4","streamersAnimation","streamersApi","addedClap","setAddedClap","_useState3","_useState4","totalClap","setTotalClap","ClapContainer","_ref","children","handleClick","props","_objectWithoutProperties","_excluded","_jsx","IconButton","_objectSpread","onClick","color","sx","border","width","height","backgroundColor","_useClapAnimation","useClapAnimation","_useClapsCount","useClapsCount","_jsxs","DisplayLayout","chipLabel","animated","style","position","padding","Typography","variant","concat","top","Stack","onMouseEnter","onMouseLeave","borderRadius","boxShadow","Streamers","start","transform","transitionDelay","spacing","ComparisonSection","beforeComponent","PropsGetter","beforeSourceCode","afterComponent","StateInitialiser","afterSourceCode"],"sourceRoot":""}