{"version":3,"file":"static/js/927.22da7c32.chunk.js","mappings":"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","sources":["components/StateReducer/useClapAnimation.ts","components/StateReducer/useClapsCount.ts","components/StateReducer/index.tsx","pages/StateReducer.tsx"],"sourcesContent":["import { useSpring } from '@react-spring/web';\r\nimport { useState } from 'react';\r\n\r\nconst useClapAnimation = () => {\r\n    const [isHover, setIsHover] = useState(false);\r\n\r\n    const boxShadowAnimation = useSpring({\r\n        from: { opacity: isHover ? 0 : 1, transition: 'ease' },\r\n        to: [{ opacity: isHover ? 1 : 0 }],\r\n        loop: isHover,\r\n        config: { duration: 1_000 },\r\n    });\r\n    const [clapAddedAnimation, clapAddedApi] = useSpring(() => ({\r\n    }));\r\n    const [streamersAnimation, streamersApi] = useSpring(() => ({}));\r\n\r\n    return { boxShadowAnimation, clapAddedAnimation, clapAddedApi, streamersAnimation, streamersApi, setIsHover }\r\n}\r\n\r\nexport default useClapAnimation;","import { useCallback, useReducer, useRef } from 'react';\r\n\r\nexport enum ClapAction {\r\n    Add = 'add',\r\n    Reset = 'reset',\r\n}\r\n\r\nexport interface ClapState {\r\n    addedClap: number;\r\n    totalClap: number;\r\n}\r\n\r\ntype ActionAdd = { type: ClapAction.Add };\r\ntype ActionRest = { type: ClapAction.Reset; payload: ClapState };\r\nexport type Actions = ActionAdd | ActionRest;\r\n  \r\nexport const internalReducer = ({ addedClap, totalClap }: ClapState, action: Actions) => {\r\n    switch (action.type) {\r\n        case ClapAction.Add:\r\n          return {\r\n            addedClap: addedClap + 1,\r\n            totalClap: totalClap + 1\r\n          };\r\n        case ClapAction.Reset:\r\n            return action.payload;\r\n        default:\r\n          return { addedClap, totalClap };\r\n    }\r\n}\r\n\r\ninterface UseClapsCountProps {\r\n    initialAddedClap?: number;\r\n    initialTotalClap?: number;\r\n    customReducer?: ({ addedClap, totalClap }: ClapState, action: Actions) => ClapState;\r\n}\r\n\r\nconst useClapsCount = ({ initialAddedClap = 0, initialTotalClap = 200, customReducer = internalReducer }: UseClapsCountProps) => {\r\n    const initialValues = useRef({ initialAddedClap, initialTotalClap });\r\n    const resetCount = useRef(0);\r\n\r\n    const [clapValues, dispatch] = useReducer(customReducer, { addedClap: initialAddedClap, totalClap: initialTotalClap });\r\n\r\n    const handleAddClap = () => dispatch({\r\n        type: ClapAction.Add\r\n    })\r\n\r\n    const resetClapCounts = useCallback(() => {\r\n        if (initialValues.current.initialAddedClap !== clapValues.addedClap) {\r\n            dispatch({\r\n                type: ClapAction.Reset,\r\n                payload: {\r\n                    addedClap: initialAddedClap,\r\n                    totalClap: initialTotalClap\r\n                }\r\n            })\r\n            resetCount.current += 1;\r\n        }\r\n    }, [clapValues.addedClap, initialAddedClap, initialTotalClap]);\r\n\r\n    return { \r\n        clapValues,\r\n        handleAddClap, \r\n        resetClapCounts, \r\n        resetDep: resetCount.current \r\n    }\r\n}\r\n\r\nexport default useClapsCount;","import { FunctionComponent, PropsWithChildren, useEffect, useState } from 'react';\r\nimport { animated } from '@react-spring/web';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Stack from '@mui/material/Stack';\r\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport useClapAnimation from './useClapAnimation';\r\nimport useClapsCount, { Actions, ClapAction, ClapState, internalReducer } from './useClapsCount';\r\n\r\nimport DisplayLayout from '../DisplayLayout';\r\nimport Streamers from '../Streamers';\r\n\r\ninterface ClapContainerProps {\r\n    handleClick: () => void;\r\n}\r\n\r\nconst ClapContainer: FunctionComponent<PropsWithChildren<ClapContainerProps>> = ({ children, handleClick, ...props }) => (\r\n    <IconButton\r\n                        onClick={handleClick}\r\n                        aria-label=\"thumb up\"\r\n                        color=\"primary\"\r\n                        sx={{ border: '1px solid', width: '60px', height: '60px', backgroundColor: '#ffffff' }}\r\n                        {...props}>\r\n        {children}\r\n    </IconButton>\r\n    )\r\n\r\nconst StateReducer: FunctionComponent = () => {\r\n    const [isReset, setIsReset] = useState(false);\r\n\r\n    const [timesOfClap, setTimesOfClap] = useState(0);\r\n    const isClappedTooMuch = timesOfClap > 5;\r\n\r\n    const customReducer = ({ addedClap, totalClap }: ClapState, action: Actions) => {\r\n        if (action.type === ClapAction.Add && isClappedTooMuch) {\r\n          return { addedClap, totalClap }\r\n        }\r\n        return internalReducer({ addedClap, totalClap }, action)\r\n      }\r\n\r\n    const { clapAddedAnimation, boxShadowAnimation, streamersAnimation, setIsHover, clapAddedApi, streamersApi } = useClapAnimation();\r\n    const { clapValues, handleAddClap, resetClapCounts, resetDep } = useClapsCount({\r\n        initialAddedClap: 0,\r\n        initialTotalClap: 200,\r\n        customReducer\r\n    });\r\n    \r\n\r\n\r\n    const handleAddedClap = () => {\r\n        if (clapValues.addedClap < 50) {\r\n            clapAddedApi.start({\r\n                from: { opacity: 2, transform: 'translate(0px, 10px)', transition: 'ease-in-out', transitionDelay: '2500' },\r\n                to: { opacity: 0, transform: 'translate(0px, -100px)' },\r\n                config: { duration: 700 },\r\n            });\r\n            streamersApi.start({\r\n                from: { opacity: 10, transform: 'scale(0)' },\r\n                to: { opacity: 0, transform: 'scale(1)' }\r\n            });\r\n            handleAddClap();\r\n            setTimesOfClap(prevSetTimesOfClap => prevSetTimesOfClap + 1);\r\n        }\r\n    };\r\n\r\n    const getClapContainerProps = () => \r\n        // Here, your can do some complicated operation before passing \r\n        // props in <ClapContainer />\r\n         ({\r\n            'aria-valuenow': clapValues.totalClap,\r\n            'aria-valuemax': 50\r\n        })\r\n\r\n    useEffect(() => {\r\n        setIsReset(true);\r\n\r\n        const timeoutId = setTimeout(() => {\r\n            setIsReset(false);\r\n        }, 2_000);\r\n\r\n        return () => clearTimeout(timeoutId);\r\n    }, [setIsReset, resetDep]);\r\n    \r\n    return (\r\n        <>\r\n            <DisplayLayout chipLabel='State Initialiser 🎂'>\r\n                <animated.div\r\n                    style={{\r\n                        position: 'relative',\r\n                        opacity: 0,\r\n                        ...clapAddedAnimation\r\n                    }}\r\n                >\r\n                    <IconButton sx={{\r\n                        padding: '20px',\r\n                        backgroundColor: '#90caf9',\r\n                        width: '20px',\r\n                        height: '20px',\r\n                    }}>\r\n                        <Typography variant=\"body2\">{`+${clapValues.addedClap}`}</Typography>\r\n                    </IconButton>\r\n                </animated.div>\r\n                <Typography variant=\"body2\" color=\"primary\" sx={{ position: 'absolute', top: '6px' }}>{clapValues.totalClap}</Typography>\r\n                <Stack \r\n                    onMouseEnter={() => setIsHover(true)}\r\n                    onMouseLeave={() => setIsHover(false)}\r\n                    sx={{\r\n                        position: 'absolute'\r\n                    }}\r\n                >\r\n                    <animated.div\r\n                        style={{\r\n                            borderRadius: '50%',\r\n                            width: '60px',\r\n                            height: ' 60px',\r\n                            position: 'absolute',\r\n                            boxShadow: '0px 0px 28px #90caf9',\r\n                            ...boxShadowAnimation,\r\n                        }}\r\n                    />\r\n                    <animated.div\r\n                        style={{\r\n                            opacity: 0,\r\n                            ...streamersAnimation\r\n                        }}\r\n                    >\r\n                        <Streamers />\r\n                    </animated.div>\r\n                    <ClapContainer handleClick={handleAddedClap} {...getClapContainerProps()} >\r\n                        <ThumbUpIcon />\r\n                    </ClapContainer>\r\n                </Stack>\r\n            </DisplayLayout>\r\n            {isClappedTooMuch && <Typography sx={{\r\n                color: 'red'\r\n            }}>You clapped too mush, do be so generous :D</Typography>}\r\n            {isReset && <Typography>Is resetting {resetDep}...</Typography>}\r\n            <Button onClick={resetClapCounts} sx={{\r\n                display: 'block',\r\n                margin: '0 auto'\r\n            }}>Reset</Button>\r\n        </>);\r\n}\r\n\r\nexport default StateReducer;","import { FunctionComponent } from \"react\";\r\n\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport ComparisonSection from \"../components/ComparisonSection\";\r\nimport StateInitialiser from \"../components/StateInitialiser\";\r\nimport StateReducer from \"../components/StateReducer\";\r\n\r\nconst StateReducerPage: FunctionComponent = () => (\r\n    <Stack spacing={2}>\r\n        <Typography variant='h4'>State Reducer</Typography>\r\n        <Typography variant='body1'>\r\n            The state-reducer pattern hinges on the concept that you can allow the user of \r\n            your component or your hook to pass in a reducer and give them the control to \r\n            update your internal state from the outside.\r\n        </Typography>\r\n        <Typography variant='body1'>\r\n            We do not pass a value or a callback, we just pass a reducer.\r\n            And we are going to pass that reducer a state and an action object, \r\n            and they can go ahead and return new state.\r\n        </Typography>\r\n        <ComparisonSection\r\n            beforeComponent={<StateInitialiser />}\r\n            beforeSourceCode=\"https://github.com/12cassie34/react-design-pattern-with-medium-clap/tree/main/src/components/StateInitialiser\"\r\n            afterComponent={<StateReducer />}\r\n            afterSourceCode=\"https://github.com/12cassie34/react-design-pattern-with-medium-clap/tree/main/src/components/StateReducer\"\r\n        />\r\n    </Stack>\r\n)\r\n\r\nexport default StateReducerPage;"],"names":["_useState","useState","_useState2","_slicedToArray","isHover","setIsHover","boxShadowAnimation","useSpring","from","opacity","transition","to","loop","config","duration","_useSpring","_useSpring2","clapAddedAnimation","clapAddedApi","_useSpring3","_useSpring4","streamersAnimation","streamersApi","ClapAction","internalReducer","_ref","action","addedClap","totalClap","type","Add","Reset","payload","_ref2","_ref2$initialAddedCla","initialAddedClap","_ref2$initialTotalCla","initialTotalClap","_ref2$customReducer","customReducer","initialValues","useRef","resetCount","_useReducer","useReducer","_useReducer2","clapValues","dispatch","resetClapCounts","useCallback","current","handleAddClap","resetDep","ClapContainer","children","handleClick","props","_objectWithoutProperties","_excluded","_jsx","IconButton","_objectSpread","onClick","color","sx","border","width","height","backgroundColor","isReset","setIsReset","_useState3","_useState4","timesOfClap","setTimesOfClap","isClappedTooMuch","_useClapAnimation","useClapAnimation","_useClapsCount","useClapsCount","useEffect","timeoutId","setTimeout","clearTimeout","_jsxs","_Fragment","DisplayLayout","chipLabel","animated","style","position","padding","Typography","variant","concat","top","Stack","onMouseEnter","onMouseLeave","borderRadius","boxShadow","Streamers","start","transform","transitionDelay","prevSetTimesOfClap","ThumbUpIcon","Button","display","margin","spacing","ComparisonSection","beforeComponent","StateInitialiser","beforeSourceCode","afterComponent","StateReducer","afterSourceCode"],"sourceRoot":""}